    #!/bin/bash

# llamarunner installer script
# This script downloads and installs the appropriate binary for your system

set -e

echo "Installing llamarunner..."

# Check if curl is available
if ! command -v curl &> /dev/null; then
    echo "curl not found, checking for wget..."
    if ! command -v wget &> /dev/null; then
        echo "Error: Neither curl nor wget is installed."
        echo "Please install one of them and try again."
        exit 1
    fi
fi

# Detect platform and architecture
detect_platform() {
    local platform=""
    local arch=""
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        platform="linux"
        if [[ "$(uname -m)" == "x86_64" ]]; then
            arch="amd64"
        elif [[ "$(uname -m)" == "aarch64" ]] || [[ "$(uname -m)" == "arm64" ]]; then
            arch="arm64"
        else
            echo "Unsupported Linux architecture: $(uname -m)"
            exit 1
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        platform="darwin"
        if [[ "$(uname -m)" == "x86_64" ]]; then
            arch="amd64"
        elif [[ "$(uname -m)" == "arm64" ]]; then
            arch="arm64"
        else
            echo "Unsupported Darwin architecture: $(uname -m)"
            exit 1
        fi
    else
        echo "Unsupported operating system: $OSTYPE"
        exit 1
    fi
    
    echo "$platform-$arch"
}

# Get the platform and architecture
PLATFORM_ARCH=$(detect_platform)
echo "Detected platform: $PLATFORM_ARCH"

# Download appropriate binary
BINARY_NAME="llamarunner-$PLATFORM_ARCH"
# TODO: Update RELEASE_TAG when switching between prerelease and regular releases
# For prereleases: use specific tag like "v0.9"
# For regular releases: can use "latest" or specific version tag
RELEASE_TAG="v0.9"
DOWNLOAD_URL="https://github.com/GGrassia/llamarunner/releases/download/$RELEASE_TAG/$BINARY_NAME"

echo "Downloading llamarunner binary from: $DOWNLOAD_URL"

# Create temporary directory for download
TMP_DIR=$(mktemp -d)
cd "$TMP_DIR"

# Download the binary
curl -L -f -o "$BINARY_NAME" "$DOWNLOAD_URL"
if [ $? -ne 0 ]; then
    echo "Error downloading binary from $DOWNLOAD_URL"
    echo "Please check your internet connection and ensure that releases are available."
    rm -rf "$TMP_DIR"
    exit 1
fi

# Verify the downloaded file is actually a binary (not an error page)
if ! file "$BINARY_NAME" | grep -q "executable"; then
    echo "Error: Downloaded file is not a valid executable."
    echo "This might be because no releases are available yet for your platform."
    rm -rf "$TMP_DIR"
    exit 1
fi

# Make binary executable
chmod +x "$BINARY_NAME"

# Install to user's local bin directory
INSTALL_DIR="$HOME/.local/bin"
mkdir -p "$INSTALL_DIR"

# Copy the binary to install location
cp "$BINARY_NAME" "$INSTALL_DIR/llamarunner"
echo "llamarunner installed successfully to $INSTALL_DIR/llamarunner"

# Clean up temporary directory
rm -rf "$TMP_DIR"

# Prompt user to create default config file
echo ""
read -p "Do you want to create a default configuration file? [Y/n] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
    echo "Creating default configuration..."
    # Create config directory if it doesn't exist
    mkdir -p "$HOME/.llama-presets"
    
    # Create default config file
    cat > "$HOME/.llama-presets/settings.toml" << EOF
# llamarunner configuration file
# This file is automatically generated and can be edited manually

# Path to llama.cpp installation
llama_cpp_path = "$HOME/llama.cpp"

# Directory where model files are stored
model_path = "$HOME/.llama-presets/models"

# Directory where preset configuration files are stored
config_path = "$HOME/.llama-presets"

# Default host for any server operations
host = "localhost"

# Default port for any server operations
port = "8080"
EOF
    
    echo "Default configuration created at $HOME/.llama-presets/settings.toml"
else
    echo "Skipping default configuration creation."
fi

echo ""
echo "Installation complete!"
echo "You can now use llamarunner by running:"
echo "  llamarunner help"
